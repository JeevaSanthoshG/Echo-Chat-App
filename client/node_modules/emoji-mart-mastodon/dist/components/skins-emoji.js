"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _nimbleEmoji = _interopRequireDefault(require("./emoji/nimble-emoji"));

var _skins = _interopRequireDefault(require("./skins"));

class SkinsEmoji extends _skins.default {
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
  }

  render() {
    const {
      skin,
      emojiProps,
      data,
      skinEmoji,
      i18n
    } = this.props;
    const {
      opened
    } = this.state;
    const skinToneNodes = [];

    for (let skinTone = 1; skinTone <= 6; skinTone++) {
      const selected = skinTone === skin;
      skinToneNodes.push( /*#__PURE__*/_react.default.createElement("span", {
        key: "skin-tone-".concat(skinTone),
        className: "emoji-mart-skin-swatch custom".concat(selected ? ' selected' : '')
      }, /*#__PURE__*/_react.default.createElement("span", {
        onClick: this.handleClick,
        "data-skin": skinTone,
        className: "emoji-mart-skin-tone-".concat(skinTone)
      }, (0, _nimbleEmoji.default)({
        emoji: skinEmoji,
        data: data,
        skin: skinTone,
        backgroundImageFn: emojiProps.backgroundImageFn,
        native: emojiProps.native,
        set: emojiProps.set,
        sheetSize: emojiProps.sheetSize,
        size: 23
      }))));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "emoji-mart-skin-swatches custom".concat(opened ? ' opened' : '')
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "emoji-mart-skin-text".concat(opened ? ' opened' : '')
    }, i18n.skintext), skinToneNodes);
  }

}

exports.default = SkinsEmoji;
SkinsEmoji.propTypes
/* remove-proptypes */
= {
  onChange: _propTypes.default.func,
  skin: _propTypes.default.number.isRequired,
  emojiProps: _propTypes.default.object.isRequired,
  skinTone: _propTypes.default.number,
  skinEmoji: _propTypes.default.string.isRequired,
  i18n: _propTypes.default.object
};
SkinsEmoji.defaultProps = {
  onChange: () => {},
  skinTone: null
};