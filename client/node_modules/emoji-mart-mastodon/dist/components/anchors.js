"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

class Anchors extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    let defaultCategory = props.categories.filter(category => category.first)[0];
    this.state = {
      selected: defaultCategory.name
    };
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick(e) {
    var index = e.currentTarget.getAttribute('data-index');
    var {
      categories,
      onAnchorClick
    } = this.props;
    onAnchorClick(categories[index], index);
  }

  render() {
    var {
      categories,
      color,
      i18n,
      icons
    } = this.props,
        {
      selected
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("nav", {
      className: "emoji-mart-anchors",
      "aria-label": i18n.categorieslabel
    }, categories.map((category, i) => {
      var {
        id,
        name,
        anchor
      } = category,
          isSelected = name == selected;

      if (anchor === false) {
        return null;
      }

      const iconId = id.startsWith('custom-') ? 'custom' : id;
      return /*#__PURE__*/_react.default.createElement("button", {
        key: id,
        "aria-label": i18n.categories[iconId],
        title: i18n.categories[iconId],
        "data-index": i,
        type: 'button',
        onClick: this.handleClick,
        className: "emoji-mart-anchor ".concat(isSelected ? 'emoji-mart-anchor-selected' : ''),
        style: {
          color: isSelected ? color : null
        }
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "emoji-mart-anchor-icon"
      }, icons.categories[iconId]()), /*#__PURE__*/_react.default.createElement("span", {
        className: "emoji-mart-anchor-bar",
        style: {
          backgroundColor: color
        }
      }));
    }));
  }

}

exports.default = Anchors;
Anchors.propTypes
/* remove-proptypes */
= {
  categories: _propTypes.default.array,
  onAnchorClick: _propTypes.default.func,
  icons: _propTypes.default.object
};
Anchors.defaultProps = {
  categories: [],
  onAnchorClick: () => {},
  icons: {}
};