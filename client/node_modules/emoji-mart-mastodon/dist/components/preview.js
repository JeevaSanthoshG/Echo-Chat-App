"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("../utils");

var _nimbleEmoji = _interopRequireDefault(require("./emoji/nimble-emoji"));

var _skinsEmoji = _interopRequireDefault(require("./skins-emoji"));

var _skinsDot = _interopRequireDefault(require("./skins-dot"));

class Preview extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    this.data = props.data;
    this.state = {
      emoji: null
    };
  }

  render() {
    var {
      emoji
    } = this.state,
        {
      emojiProps,
      skinsProps,
      showSkinTones,
      title,
      emoji: idleEmoji,
      i18n,
      showPreview
    } = this.props;

    if (emoji && showPreview) {
      var emojiData = (0, _utils.getData)(emoji, null, null, this.data),
          {
        emoticons = []
      } = emojiData,
          knownEmoticons = [],
          listedEmoticons = [];
      emoticons.forEach(emoticon => {
        if (knownEmoticons.indexOf(emoticon.toLowerCase()) >= 0) {
          return;
        }

        knownEmoticons.push(emoticon.toLowerCase());
        listedEmoticons.push(emoticon);
      });
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "emoji-mart-preview"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "emoji-mart-preview-emoji",
        "aria-hidden": "true"
      }, (0, _nimbleEmoji.default)({
        key: emoji.id,
        emoji: emoji,
        data: this.data,
        ...emojiProps
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: "emoji-mart-preview-data",
        "aria-hidden": "true"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "emoji-mart-preview-name"
      }, emoji.name), /*#__PURE__*/_react.default.createElement("div", {
        className: "emoji-mart-preview-shortnames"
      }, emojiData.short_names.map(short_name => /*#__PURE__*/_react.default.createElement("span", {
        key: short_name,
        className: "emoji-mart-preview-shortname"
      }, ":", short_name, ":"))), /*#__PURE__*/_react.default.createElement("div", {
        className: "emoji-mart-preview-emoticons"
      }, listedEmoticons.map(emoticon => /*#__PURE__*/_react.default.createElement("span", {
        key: emoticon,
        className: "emoji-mart-preview-emoticon"
      }, emoticon)))));
    } else {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "emoji-mart-preview"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "emoji-mart-preview-emoji",
        "aria-hidden": "true"
      }, idleEmoji && idleEmoji.length && (0, _nimbleEmoji.default)({
        emoji: idleEmoji,
        data: this.data,
        ...emojiProps
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: "emoji-mart-preview-data",
        "aria-hidden": "true"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "emoji-mart-title-label"
      }, title)), showSkinTones && /*#__PURE__*/_react.default.createElement("div", {
        className: "emoji-mart-preview-skins".concat(skinsProps.skinEmoji ? ' custom' : '')
      }, skinsProps.skinEmoji ? /*#__PURE__*/_react.default.createElement(_skinsEmoji.default, {
        skin: skinsProps.skin,
        emojiProps: emojiProps,
        data: this.data,
        skinEmoji: skinsProps.skinEmoji,
        i18n: i18n,
        onChange: skinsProps.onChange
      }) : /*#__PURE__*/_react.default.createElement(_skinsDot.default, {
        skin: skinsProps.skin,
        i18n: i18n,
        onChange: skinsProps.onChange
      })));
    }
  }

}

exports.default = Preview;
Preview.propTypes
/* remove-proptypes */
= {
  showSkinTones: _propTypes.default.bool,
  title: _propTypes.default.string.isRequired,
  emoji: _propTypes.default.string.isRequired,
  emojiProps: _propTypes.default.object.isRequired,
  skinsProps: _propTypes.default.object.isRequired
};
Preview.defaultProps = {
  showSkinTones: true,
  onChange: () => {}
};